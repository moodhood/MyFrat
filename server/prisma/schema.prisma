// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  displayName String     @unique
  permissions Json       @default("[]")
  userRoles   UserRole[]
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  passwordHash     String
  name             String?
  phone            String?
  birthday         DateTime?
  address          String?
  profilePicture   String?
  lastSeen         DateTime?         @default(now())
  emailConfirmed   Boolean           @default(false)
  emailConfirmCode String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime          @default(now())

  userRoles        UserRole[]
  duties           DutyAssignment[]
  dutyMembers      DutyMember[]
  philanthropy     PhilanthropyLog[]
  votes            Vote[]
  createdMotions   Motion[]           @relation("CreatedMotions")
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  @@unique([userId, roleId])
}

// ─── Recurring duties and assignments ────────────────────────────

model Duty {
  id           Int             @id @default(autoincrement())
  name         String
  dayOfWeek    Int             // 1=Monday .. 7=Sunday

  // Optional “weekly due time” (hour:minute). If both null → interpret as 00:00.
  dueHour      Int?    // 0..23
  dueMinute    Int?    // 0..59

  startDate    DateTime
  endDate      DateTime?        // optional final date for assignment generation
  active       Boolean          @default(true)
  currentIndex Int              @default(0)

  members      DutyMember[]
  assignments  DutyAssignment[]

  createdBy    Int
  createdAt    DateTime         @default(now())
}

model DutyMember {
  id       Int   @id @default(autoincrement())
  duty     Duty  @relation(fields: [dutyId], references: [id], onDelete: Cascade)
  dutyId   Int
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  order    Int

  @@unique([dutyId, userId])
  @@index([dutyId, order])
}

model DutyAssignment {
  id        Int      @id @default(autoincrement())
  duty      Duty     @relation(fields: [dutyId], references: [id], onDelete: Cascade)
  dutyId    Int
  assignee  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  weekOf    DateTime
  dueDate   DateTime

  done      Boolean  @default(false)
  doneAt    DateTime?

  @@index([userId, weekOf])
  @@index([dutyId, weekOf])
}

model PhilanthropyLog {
  id           Int      @id @default(autoincrement())
  date         DateTime
  organization String
  hours        Int
  notes        String?
  createdAt    DateTime @default(now())

  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Motion {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  options     String[]
  deadline    DateTime?
  stopped     Boolean   @default(false)
  archived    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  creatorId   Int
  creator     User      @relation("CreatedMotions", fields: [creatorId], references: [id], onDelete: Cascade)

  votes       Vote[]
}

model Vote {
  id       Int      @id @default(autoincrement())
  choice   String
  castAt   DateTime @default(now())

  userId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  motionId Int
  motion   Motion   @relation(fields: [motionId], references: [id], onDelete: Cascade)

  @@unique([userId, motionId])
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  location    String?
  start       DateTime
  end         DateTime
  category    EventCategory
}

enum EventCategory {
  PHILANTHROPY
  BROTHERHOOD
  ADMIN
  OTHER
}

model Folder {
  id         Int        @id @default(autoincrement())
  name       String
  parentId   Int?
  parent     Folder?    @relation("Subfolders", fields: [parentId], references: [id])
  children   Folder[]   @relation("Subfolders")
  createdAt  DateTime   @default(now())
  createdBy  Int
  documents  Document[]
}

model Document {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  pdfUrl     String?
  category   String?
  folderId   Int?
  folder     Folder?  @relation(fields: [folderId], references: [id])
  createdAt  DateTime @default(now())
}
