datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  permissions Json    @default("[]")
  users       User[]
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  passwordHash      String
  name              String?
  phone             String?
  birthday          DateTime?
  address           String?
  profilePicture    String?
  lastSeen          DateTime?         @default(now())
  emailConfirmed    Boolean           @default(false)
  emailConfirmCode  String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime          @default(now())

  roleId            Int
  role              Role              @relation(fields: [roleId], references: [id])

  duties            DutyAssignment[]
  philanthropy      PhilanthropyLog[]
  votes             Vote[]
  createdMotions    Motion[]          @relation("CreatedMotions")
}

model DutyAssignment {
  id          Int      @id @default(autoincrement())
  description String
  dueDate     DateTime
  completed   Boolean  @default(false)
  completedAt DateTime?

  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhilanthropyLog {
  id           Int      @id @default(autoincrement())
  date         DateTime
  organization String
  hours        Int
  notes        String?
  createdAt    DateTime @default(now())

  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Motion {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  options     String[]
  deadline    DateTime?
  stopped     Boolean   @default(false)
  archived    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  creatorId   Int
  creator     User      @relation("CreatedMotions", fields: [creatorId], references: [id], onDelete: Cascade)

  votes       Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  choice    String
  castAt    DateTime @default(now())

  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  motionId  Int
  motion    Motion   @relation(fields: [motionId], references: [id], onDelete: Cascade)

  @@unique([userId, motionId])
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  location    String?
  start       DateTime
  end         DateTime
  category    EventCategory
}

enum EventCategory {
  PHILANTHROPY
  BROTHERHOOD
  ADMIN
  OTHER
}

model Folder {
  id         Int        @id @default(autoincrement())
  name       String
  parentId   Int?       // nullable for root-level folders
  parent     Folder?    @relation("Subfolders", fields: [parentId], references: [id])
  children   Folder[]   @relation("Subfolders")
  createdAt  DateTime   @default(now())
  createdBy  Int        // officer user ID
  documents  Document[] // one-to-many to Document
}

model Document {
  id         Int        @id @default(autoincrement())
  name       String
  url        String
  pdfUrl     String?    // optional PDF version (converted from Office formats)
  category   String?
  folderId   Int?       // nullable if in root
  folder     Folder?    @relation(fields: [folderId], references: [id])
  createdAt  DateTime   @default(now())
}
